package com.example.tagbincam;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.List;

import org.apache.http.HttpResponse;
import org.apache.http.NameValuePair;
import org.apache.http.client.HttpClient;
import org.apache.http.client.entity.UrlEncodedFormEntity;
import org.apache.http.client.methods.HttpPost;
import org.apache.http.impl.client.DefaultHttpClient;
import org.apache.http.message.BasicNameValuePair;

import android.net.Uri;
import android.os.AsyncTask;
import android.os.Bundle;
import android.provider.MediaStore;
import android.app.Activity;
import android.content.Intent;
import android.database.Cursor;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.hardware.Camera;
import android.util.Log;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.ImageButton;
import android.widget.ImageView;

public class MainActivity extends Activity implements View.OnClickListener{
	
	ImageButton ib;
	Button b,misub;
	ImageView iv;
	EditText mitext;
	final static int camData = 0;
	final static int RESULT_LOAD_IMAGE = 1;
	Intent i, id;
	Bitmap bmp;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		initialize();
		InputStream is = getResources().openRawResource(R.drawable.ic_launcher);
		bmp = BitmapFactory.decodeStream(is);
	}
	private void initialize() {
		iv = (ImageView) findViewById (R.id.iView1);
		ib = (ImageButton) findViewById (R.id.iButton1);
		b = (Button) findViewById (R.id.bttn1);
		misub = (Button) findViewById (R.id.bttnMI1);
		mitext = (EditText) findViewById(R.id.MItext1);
		b.setOnClickListener(this);
		ib.setOnClickListener(this);
		
	}
	public static Camera getCameraInstance(){
	    Camera c = null;
	    try {
	        c = Camera.open(); // attempt to get a Camera instance
	    }
	    catch (Exception e){
	        // Camera is not available (in use or does not exist)
	    }
	    return c; // returns null if camera is unavailable
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.main, menu);
		return true;
	}

	@Override
	public void onClick(View v) {
		// TODO Auto-generated method stub
		switch (v.getId()) {
		case R.id.iButton1:
			i = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
			startActivityForResult(i, camData);
			break;
		case R.id.bttn1:
			id = new Intent(
					Intent.ACTION_PICK, android.provider.MediaStore.Images.Media.EXTERNAL_CONTENT_URI);					 
					startActivityForResult(id, RESULT_LOAD_IMAGE);
			
			break;
		}
	}
	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		// TODO Auto-generated method stub
		super.onActivityResult(requestCode, resultCode, data);
		if (requestCode == camData && resultCode == RESULT_OK) {
			Bundle extras = data.getExtras();
			bmp = (Bitmap) extras.get("data");
			iv.setImageBitmap(bmp);
			misub.setVisibility(View.VISIBLE);
			mitext.setVisibility(View.VISIBLE);
			ByteArrayOutputStream baos = new ByteArrayOutputStream();  
			bmp.compress(Bitmap.CompressFormat.PNG, 100, baos); //bmp is the bitmap object   
			byte[] b = baos.toByteArray();
		}
		else if (requestCode == RESULT_LOAD_IMAGE && resultCode == RESULT_OK) {
			Uri selectedImage = data.getData();
            String[] filePathColumn = { MediaStore.Images.Media.DATA };
 
            Cursor cursor = getContentResolver().query(selectedImage,
                    filePathColumn, null, null, null);
            cursor.moveToFirst();
 
            int columnIndex = cursor.getColumnIndex(filePathColumn[0]);
            String picturePath = cursor.getString(columnIndex);
            cursor.close();
            BitmapFactory.Options opt = new BitmapFactory.Options();
            opt.inSampleSize = 4;
            bmp = BitmapFactory.decodeFile(picturePath, opt);
            iv.setImageBitmap(bmp);
            ByteArrayOutputStream baos = new ByteArrayOutputStream();  
            bmp.compress(Bitmap.CompressFormat.PNG, 100, baos); //bmp is the bitmap object   
            byte[] b = baos.toByteArray();
		}
		
	}
	
	private class DoSampleHttpPostRequest extends AsyncTask<Void, Void, CharSequence> {

	    @Override
	    protected CharSequence doInBackground(Void... params) {
	        BufferedReader in = null;
	        String baseUrl = "http://10.0.2.2:8080/android/";

	        try {
	            HttpClient httpClient = new DefaultHttpClient();
	            HttpPost request = new HttpPost(baseUrl);

	            List<NameValuePair> postParameters = new ArrayList<NameValuePair>();
	            postParameters.add(new BasicNameValuePair("login", "someuser"));
	            postParameters.add(new BasicNameValuePair("data", "somedata"));
	            UrlEncodedFormEntity form = new UrlEncodedFormEntity(postParameters);
	            request.setEntity(form);

	            Log.v("log", "making POST request to: " + baseUrl);

	            HttpResponse response = httpClient.execute(request);

	            in = new BufferedReader(new InputStreamReader(response.getEntity().getContent()));
	            StringBuffer sb = new StringBuffer("");
	            String line = "";
	            String NL = System.getProperty("line.separator");
	            while ((line = in.readLine()) != null) {
	                sb.append(line + NL);
	            }
	            in.close();

	            return sb.toString();
	        } catch (Exception e) {
	            return "Exception happened: " + e.getMessage();
	        } finally {
	            if (in != null) {
	                try {
	                    in.close();
	                } catch (IOException e) {
	                    e.printStackTrace();
	                }
	            }
	        }
	    }

	    @Override
	    protected void onPostExecute(CharSequence result) {
	        // this refers to a TextView defined as a private field in the parent Activity
	        //textView.setText(result);
	    }

	}
	
	

}
